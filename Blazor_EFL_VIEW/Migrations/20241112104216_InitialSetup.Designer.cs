// <auto-generated />
using System;
using Blazor_EFL_VIEW.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pomelo.EntityFrameworkCore.MySql;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace EntityFramework_Library.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241112104216_InitialSetup")]
    partial class InitialSetup
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("EntityFramework_Library.Classes.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("BookType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("PublishedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("EntityFramework_Library.Classes.BookDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AvailableCopies")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("BorrowedCopies")
                        .HasColumnType("int");

                    b.Property<int>("TotalCopies")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId")
                        .IsUnique();

                    b.ToTable("BookDetails");
                });

            modelBuilder.Entity("EntityFramework_Library.Classes.BookLoan", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LibrarianId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LoanDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ReturnLibrarianId")
                        .HasColumnType("int");

                    b.HasKey("CustomerId", "BookId");

                    b.HasIndex("BookId");

                    b.HasIndex("LibrarianId");

                    b.HasIndex("ReturnLibrarianId");

                    b.ToTable("BookLoans");
                });

            modelBuilder.Entity("EntityFramework_Library.Classes.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("AvailableCopies")
                        .HasColumnType("int");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ItemType")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("varchar(21)");

                    b.Property<DateTime>("PublishedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Items");

                    b.HasDiscriminator<string>("ItemType").HasValue("Item");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("EntityFramework_Library.Classes.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PersonType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("varchar(13)");

                    b.HasKey("Id");

                    b.ToTable("Persons");

                    b.HasDiscriminator<string>("PersonType").HasValue("Person");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("EntityFramework_Library.Classes.Biography", b =>
                {
                    b.HasBaseType("EntityFramework_Library.Classes.Item");

                    b.HasDiscriminator().HasValue("Biography");
                });

            modelBuilder.Entity("EntityFramework_Library.Classes.Fantasy", b =>
                {
                    b.HasBaseType("EntityFramework_Library.Classes.Item");

                    b.HasDiscriminator().HasValue("Fantasy");
                });

            modelBuilder.Entity("EntityFramework_Library.Classes.Mystery", b =>
                {
                    b.HasBaseType("EntityFramework_Library.Classes.Item");

                    b.HasDiscriminator().HasValue("Mystery");
                });

            modelBuilder.Entity("EntityFramework_Library.Classes.NonFiction", b =>
                {
                    b.HasBaseType("EntityFramework_Library.Classes.Item");

                    b.HasDiscriminator().HasValue("NonFiction");
                });

            modelBuilder.Entity("EntityFramework_Library.Classes.Novel", b =>
                {
                    b.HasBaseType("EntityFramework_Library.Classes.Item");

                    b.HasDiscriminator().HasValue("Novel");
                });

            modelBuilder.Entity("EntityFramework_Library.Classes.ScienceFiction", b =>
                {
                    b.HasBaseType("EntityFramework_Library.Classes.Item");

                    b.HasDiscriminator().HasValue("ScienceFiction");
                });

            modelBuilder.Entity("EntityFramework_Library.Classes.Textbook", b =>
                {
                    b.HasBaseType("EntityFramework_Library.Classes.Item");

                    b.HasDiscriminator().HasValue("Textbook");
                });

            modelBuilder.Entity("EntityFramework_Library.Classes.Author", b =>
                {
                    b.HasBaseType("EntityFramework_Library.Classes.Person");

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasDiscriminator().HasValue("Author");
                });

            modelBuilder.Entity("EntityFramework_Library.Classes.Customer", b =>
                {
                    b.HasBaseType("EntityFramework_Library.Classes.Person");

                    b.HasDiscriminator().HasValue("Customer");
                });

            modelBuilder.Entity("EntityFramework_Library.Classes.Librarian", b =>
                {
                    b.HasBaseType("EntityFramework_Library.Classes.Person");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasDiscriminator().HasValue("Librarian");
                });

            modelBuilder.Entity("EntityFramework_Library.Classes.Book", b =>
                {
                    b.HasOne("EntityFramework_Library.Classes.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("EntityFramework_Library.Classes.BookDetails", b =>
                {
                    b.HasOne("EntityFramework_Library.Classes.Book", "Book")
                        .WithOne("BookDetails")
                        .HasForeignKey("EntityFramework_Library.Classes.BookDetails", "BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("EntityFramework_Library.Classes.BookLoan", b =>
                {
                    b.HasOne("EntityFramework_Library.Classes.Book", "Book")
                        .WithMany("BookLoans")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityFramework_Library.Classes.Customer", "Customer")
                        .WithMany("BookLoans")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityFramework_Library.Classes.Librarian", "Librarian")
                        .WithMany()
                        .HasForeignKey("LibrarianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityFramework_Library.Classes.Librarian", "ReturnLibrarian")
                        .WithMany()
                        .HasForeignKey("ReturnLibrarianId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Book");

                    b.Navigation("Customer");

                    b.Navigation("Librarian");

                    b.Navigation("ReturnLibrarian");
                });

            modelBuilder.Entity("EntityFramework_Library.Classes.Book", b =>
                {
                    b.Navigation("BookDetails")
                        .IsRequired();

                    b.Navigation("BookLoans");
                });

            modelBuilder.Entity("EntityFramework_Library.Classes.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("EntityFramework_Library.Classes.Customer", b =>
                {
                    b.Navigation("BookLoans");
                });
#pragma warning restore 612, 618
        }
    }
}
